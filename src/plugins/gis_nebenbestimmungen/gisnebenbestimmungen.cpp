

#include <qgisinterface.h>
#include "qgsguiutils.h"

#include "gisnebenbestimmungen.h"
#include "gisnebenbestimmungengui.h"

#include <QAction>
#include <QToolBar>


static const QString sName = QObject::tr( "GIS Nebenbestimmungen" );
static const QString sDescription = QObject::tr( "Erstellt GIS-Nebenbestimmungen konforme ESRI-Shapedateien" );
static const QString sCategory = QObject::tr( "Plugins" );
static const QString sPluginVersion = QObject::tr( "Version 0.1" );
static const QgisPlugin::PluginType sPluginType = QgisPlugin::UI;
static const QString sPluginIcon = ":/gisnebenbestimmungen/gisnebenbestimmungen.png";

//////////////////////////////////////////////////////////////////////
//
// THE FOLLOWING METHODS ARE MANDATORY FOR ALL PLUGINS
//
//////////////////////////////////////////////////////////////////////

/**
 * Constructor for the plugin. The plugin is passed a pointer
 * an interface object that provides access to exposed functions in QGIS.
 * @param theQGisInterface - Pointer to the QGIS interface object
 */
GisNebenbestimmungen::GisNebenbestimmungen( QgisInterface *qgisInterface ):
  QgisPlugin( sName, sDescription, sCategory, sPluginVersion, sPluginType ),
  mQGisIface( qgisInterface )
{
}

GisNebenbestimmungen::~GisNebenbestimmungen()
{

}

/*
 * Initialize the GUI interface for the plugin - this is only called once when the plugin is
 * added to the plugin registry in the QGIS application.
 */
void GisNebenbestimmungen::initGui()
{

  // Create the action for tool
  mQActionPointer = new QAction( QIcon( ":/gisnebenbestimmungen/gisnebenbestimmungen.png" ),"GIS Nebenbestimmungen", this );
  mQActionPointer->setObjectName( QStringLiteral("mQActionPointer") );
  // Set the what's this text
  mQActionPointer->setWhatsThis("Erstellt GIS-Nebenbstimmungen konforme ESRI-Shape-Dateien");
  // Connect the action to the run
  connect( mQActionPointer, &QAction::triggered, this, &GisNebenbestimmungen::run );
  // Add the icon to the toolbar
  mQGisIface->addToolBarIcon( mQActionPointer );
  mQGisIface->addPluginToMenu("&GIS Nebenbestimmungen", mQActionPointer );
}
//method defined in interface
void GisNebenbestimmungen::help()
{
  //implement me!
}

// Slot called when the menu item is triggered
// If you created more menu items / toolbar buttons in initiGui, you should
// create a separate handler for each action - this single run() method will
// not be enough
void GisNebenbestimmungen::run()
{
  GisNebenbestimmungenGui *myPluginGui = new GisNebenbestimmungenGui( mQGisIface->mainWindow(), QgsGuiUtils::ModalDialogFlags );
  myPluginGui->setAttribute( Qt::WA_DeleteOnClose );

  myPluginGui->show();
}

// Unload the plugin by cleaning up the GUI
void GisNebenbestimmungen::unload()
{
  // remove the GUI
  mQGisIface->removePluginMenu( "&GIS Nebenbestimmungen", mQActionPointer );
  mQGisIface->removeToolBarIcon( mQActionPointer );
  delete mQActionPointer;
}


//////////////////////////////////////////////////////////////////////////
//
//
//  THE FOLLOWING CODE IS AUTOGENERATED BY THE PLUGIN BUILDER SCRIPT
//    YOU WOULD NORMALLY NOT NEED TO MODIFY THIS, AND YOUR PLUGIN
//      MAY NOT WORK PROPERLY IF YOU MODIFY THIS INCORRECTLY
//
//
//////////////////////////////////////////////////////////////////////////


/**
 * Required extern functions needed  for every plugin
 * These functions can be called prior to creating an instance
 * of the plugin class
 */
// Class factory to return a new instance of the plugin class
QGISEXTERN QgisPlugin *classFactory( QgisInterface *qgisInterfacePointer )
{
  return new GisNebenbestimmungen( qgisInterfacePointer );
}
// Return the name of the plugin - note that we do not user class members as
// the class may not yet be insantiated when this method is called.
QGISEXTERN QString name()
{
  return sName;
}

// Return the description
QGISEXTERN QString description()
{
  return sDescription;
}

// Return the category
QGISEXTERN QString category()
{
  return sCategory;
}

// Return the type (either UI or MapLayer plugin)
QGISEXTERN int type()
{
  return sPluginType;
}

// Return the version number for the plugin
QGISEXTERN QString version()
{
  return sPluginVersion;
}

QGISEXTERN QString icon()
{
  return sPluginIcon;
}

// Delete ourself
QGISEXTERN void unload( QgisPlugin *pluginPointer )
{
  delete pluginPointer;
}
